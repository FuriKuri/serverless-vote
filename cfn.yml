AWSTemplateFormatVersion: '2010-09-09'
Description: 'The AWS stack for the Voting App'
Parameters:
  TableName:
    Type: String
    Description: 'The name of the DynamoDB table'
  StreamName:
    Type: String
    Description: 'The name of the Kinesis Stream'
Resources:
  KinesisStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      ShardCount: 1
      Name: !Ref StreamName
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: VoteAppInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'lambda:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/*
              - Action:
                  - 'kinesis:*'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'kinesis:*'
                Effect: Allow
                Resource: '*'
  IAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
  HttpToKinesis:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt [IAMRole, Arn]
      MemorySize: '128'
      Code:
        ZipFile: !Sub |
            var AWS = require('aws-sdk');

            var endpoint = '${StreamName}';
            var kinesis = new AWS.Kinesis({region : 'eu-central-1'});

            exports.handler = function (event, context) {
              var vote = {
                id: event.pathParameters.id,
                type: JSON.parse(event.body).type
              };
              console.log(vote);

              var record = JSON.stringify(vote);

              var recordParams = {
                Data : record,
                PartitionKey : vote.id,
                StreamName : endpoint
              };

              kinesis.putRecord(recordParams, function(err, data) {
                if (err) {
                  console.log(err);
                  context.done(null, {
                   statusCode: 500,
                   body: 'Error'
                  });
                } else {
                  console.log('Successfully sent data to Kinesis.');
                  var msg = 'Thank you for casting a vote for ' + vote.type;
                  context.done(null, {
                    statusCode: 200,
                    body: '{ "msg" : "' + msg + '" }'
                  });
                }
              });
            }
      Runtime: nodejs4.3
      Timeout: '30'
  KinesisToDynamoDB:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt [IAMRole, Arn]
      MemorySize: '128'
      Code:
        ZipFile: !Sub |
            var AWS = require('aws-sdk');
            var dynamodb = new AWS.DynamoDB();

            var tableName = '${TableName}';

            function updateDB(votes, context) {
              Object.getOwnPropertyNames(votes).forEach(function(id) {
                var vote = votes[id];
                console.log(vote);
                dynamodb.updateItem({
                  'TableName': tableName,
                  'Key': { 'Id' : { 'S': id }},
                  'UpdateExpression': 'ADD Good :good, Bad :bad',
                  'ExpressionAttributeValues': { 
                    ':good' : { "N" : vote.good.toString() },
                    ':bad' : { "N" : vote.bad.toString() }
                  }
                }, function(err, data) {
                  if (err) {
                    console.log(err);
                    context.fail("Error updating table: ", err)
                  } else {
                    console.log("Vote received:", vote);
                    context.succeed("Successfully processed.");
                 }
                });
              });
            }

            exports.handler = function (event, context) {
              console.log(JSON.stringify(event, null, '  '));

              var votes = {};
              var len = event.Records.length;
              for (var i = 0; i < len; i++) {
                var vote = JSON.parse(new Buffer(event.Records[i].kinesis.data, 'base64'));
                if (!votes[vote.id]) {
                  votes[vote.id] = {
                    good: 0,
                    bad: 0
                  }
                }
                votes[vote.id][vote.type]++;
              }

              console.log(votes);

              updateDB(votes, context);
            }
      Runtime: nodejs4.3
      Timeout: '30'
  KinesisStreamSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt [KinesisStream, Arn]
      FunctionName: !GetAtt [KinesisToDynamoDB, Arn]
      StartingPosition: "TRIM_HORIZON"
      BatchSize: '100'
  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: 'Vote API'
      Name: 'Vote API'
  VoteIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "{id}"
  PostVoteMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref VoteIdResource
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Join [ "", ['arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/', !GetAtt [HttpToKinesis, Arn], '/invocations']]
        Credentials: !GetAtt [IAMRole, Arn]
  GetVoteMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref VoteIdResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: 'arn:aws:apigateway:eu-central-1:dynamodb:action/GetItem'
        Credentials: !GetAtt [IAMRole, Arn]
        IntegrationResponses:
          - SelectionPattern: 200
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: !Sub |
              {
                "TableName": "${TableName}",
                "Key": {
                  "Id": {
                    "S": "$input.params('id')"
                  }
                },
                "ConsistentRead": false,
                "ReturnConsumedCapacity": "TOTAL"
              }
  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ["GetVoteMethod", "PostVoteMethod"]
    Properties:
      RestApiId: !Ref RestApi
  RestApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref RestApiDeployment
      Description: 'cfn deployed Stage vote'
      RestApiId: !Ref RestApi
      StageName: 'api'
      Variables:
        Stack: 'api'
Outputs:
  ApiUrl:
    Description: URL for API
    Value: !Join [ "", ['https://', !Ref RestApi, '.execute-api.', !Ref 'AWS::Region','.amazonaws.com/api']]
