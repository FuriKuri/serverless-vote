AWSTemplateFormatVersion: '2010-09-09'
Description: 'The AWS stack for the Voting App'
Parameters:
  TableName:
    Type: String
    Description: 'The name of the DynamoDB table'
  StreamName:
    Type: String
    Description: 'The name of the Kinesis Stream'
Resources:
  KinesisStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      ShardCount: 1
      Name: !Ref StreamName
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: URLShortenerInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/*
              - Action:
                  - 'kinesis:*'
                Effect: Allow
                Resource: '*'
  IAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
  HttpToKinesis:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt [IAMRole, Arn]
      MemorySize: '128'
      Code:
        ZipFile: !Sub |
            var AWS = require('aws-sdk');

            var endpoint = '${StreamName}';
            var creds = new AWS.EnvironmentCredentials('AWS');

            exports.handler = function (event, context) {
              console.log(endpoint);
            }
      Runtime: nodejs4.3
      Timeout: '30'
  KinesisToDynamoDB:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt [IAMRole, Arn]
      MemorySize: '128'
      Code:
        ZipFile: !Sub |
            var AWS = require('aws-sdk');

            var endpoint = '${StreamName}';
            var creds = new AWS.EnvironmentCredentials('AWS');

            exports.handler = function (event, context) {
              console.log(endpoint);
            }
      Runtime: nodejs4.3
      Timeout: '30'
  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: 'Vote API'
      Name: 'Vote API'
  VoteIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "{id}"
  PostVoteMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId:
        Fn::GetAtt:
          - 'RestApi'
          - 'VoteIdResource'
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS_PROXY'
        Uri: !Join [ "", ['arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/', !GetAtt [HttpToKinesis, Arn], '/invocations']]
  GetVoteMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId:
        Fn::GetAtt:
          - 'RestApi'
          - 'VoteIdResource'
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: 'arn:aws:apigateway:eu-central-1:dynamodb:action/GetItem'
        RequestTemplates:
          application/json: |
                {
                    "TableName": "${TableName}",
                    "Key": {
                        "Id": {
                            "S": "$input.params('id')"
                        }
                    },
                    "ConsistentRead": false,
                    "ReturnConsumedCapacity": "TOTAL"
                }
          integration.request.header.x-dfl-source-ip: context.identity.sourceIp
  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ["GetVoteMethod", "PostVoteMethod"]
    Properties:
      RestApiId: !Ref RestApi
  RestApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref RestApiDeployment
      Description: 'cfn deployed Stage vote'
      RestApiId: !Ref RestApi
      StageName: 'vote'
      Variables:
        Stack: 'vote'

